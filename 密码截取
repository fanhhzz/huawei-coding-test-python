#找最长回文字符
#找到和首字母相同，往内推， 不存在回文
############main
def centerw(s,i,j):
    n=len(s)
    p=i-1
    k=j+1
    temp=0
    while p>=0 and k<n and s[p]==s[k]:
        p=p-1
        k=k+1
        temp=temp+2
    return temp
    
def longw(s):
    n=len(s)
    maxw=1
    for m in range(n-1):
        len1=centerw(s, m, m)+1
        if s[m]==s[m+1]:
            len2=centerw(s, m, m+1)+2
        else:
            len2=0
        if max(len1,len2)>maxw:
            maxw=max(len1,len2)
    return maxw
while True:
    try:
        a=input()
        print(longw(a))
    except:break

########################mine超时
def checkw(s,i,j):
    #if (j-i)%2==0:
        temp=0
        while i<=j:
            if s[i]==s[j] and i<j:
                temp+=2
                i+=1
                j-=1
            elif i==j:
                temp+=1
                i+=1
                j-=1
            else:
                return 0
                break
        return temp
def longw(s):
    maxw=1
    n=len(s)
    for i in range(n-1):
        for j in range(i+1,n):
            if checkw(s, i, j)>maxw:
                maxw=checkw(s, i, j)
    return maxw
while True:
    try:
        s=input()
        print(longw(s))
    except:break
##########
暴力解法 运行超时
class Solution:
    # 暴力匹配（超时）
    def longestPalindrome(self, s: str) -> str:
        # 特判
        size = len(s)
        if size < 2:
            return s

        max_len = 1
        res = s[0]

        # 枚举所有长度大于等于 2 的子串
        for i in range(size - 1):
            for j in range(i + 1, size):
                if j - i + 1 > max_len and self.__valid(s, i, j):
                    max_len = j - i + 1
                    res = s[i:j + 1]
        return res

    def __valid(self, s, left, right):
        # 验证子串 s[left, right] 是否为回文串
        while left < right:
            if s[left] != s[right]:
                return False
            left += 1
            right -= 1
        return True
while True:
    try:
        a=input()
        b=Solution()
        psw=b.longestPalindrome(a)
        print(len(psw))
    except:break
############动态规划解法 运行超时
class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        dp = [[False] * n for _ in range(n)]
        ans = ""
        # 枚举子串的长度 l+1
        for l in range(n):
            # 枚举子串的起始位置 i，这样可以通过 j=i+l 得到子串的结束位置
            for i in range(n):
                j = i + l
                if j >= len(s):
                    break
                if l == 0:
                    dp[i][j] = True
                elif l == 1:
                    dp[i][j] = (s[i] == s[j])
                else:
                    dp[i][j] = (dp[i + 1][j - 1] and s[i] == s[j])
                if dp[i][j] and l + 1 > len(ans):
                    ans = s[i:j+1]
        return ans
while True:
    try:
        a=input()
        b=Solution()
        c=b.longestPalindrome(a)
        print(len(c))
    except:break
########
https://blog.nowcoder.net/n/aaae2d8ed8764d99a4e61f4c365c8ee0?f=comment
leetcode第五题
按照奇偶顺序，找到最长的list即可。
代码逻辑非常简单

def longp(s):
    res = ''
    for i in range(len(s)):
        #先判定奇数的，从i开始左右对比
        tmp = helper(s,i,i)
        if len(tmp) > len(res):res = tmp
        #再判定偶数的，从i和i+1开始对比
        tmp = helper(s,i,i+1)
        if len(tmp) > len(res):res = tmp
    print(len(res))
 
def helper(s,l,r):
    while l >= 0 and r < len(s) and s[l] == s[r]:
        l -= 1
        r += 1
    return s[l+1:r]
 
while True:
    try:
        s = input()
        longp(s)
    except:
        break
