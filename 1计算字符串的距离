* 设Ai为字符串A(a1a2a3 … am)的前i个字符（即为a1,a2,a3 … ai）
    * 设Bj为字符串B(b1b2b3 … bn)的前j个字符（即为b1,b2,b3 … bj）
    *
    * 设 L(i,j)为使两个字符串和Ai和Bj相等的最小操作次数。
    * 当ai==bj时 显然 L(i,j) = L(i-1,j-1)
    * 当ai!=bj时
    *
    *  若将它们修改(修改ai,bj)为相等，则对两个字符串至少还要操作L(i-1,j-1)次
    *  若删除ai或在bj后添加ai，则对两个字符串至少还要操作L(i-1,j)次
    *  若删除bj或在ai后添加bj，则对两个字符串至少还要操作L(i,j-1)次
    *  此时L(i,j) = min( L(i-1,j-1), L(i-1,j), L(i,j-1) ) + 1
    *
    * 显然，L(i,0)=i，L(0,j)=j, 再利用上述的递推公式，可以直接计算出L(i,j)值。
    ############运行超时
def compare(a,b):
    m,n=len(a),len(b)
    if m==0 or n==0:
        return abs(len(a)-len(b))
    else:
        c=a[:-1]
        d=b[:-1]
        if a[-1]==b[-1]:
            return  compare(c,d)
        else:
            return  min(compare(c,d),compare(a,d),compare(c,b))+1
while True:
    try:
        a=input()
        b=input()
        print(compare(a,b))
            
    except:
        break
#####################
https://www.jianshu.com/p/9a53f32cf62b
def compare(a,b):
    m,n=len(a),len(b)
    m = len(a) + 1
    n = len(b) + 1
    e=[[i+j for j in range(n)] for  i in range(m)]
    for i in range(1,m):
        for j in range(1,n):
            if a[i-1]==b[j-1]:
                e[i][j]=e[i-1][j-1]
            else:
                e[i][j]=min(e[i-1][j]+1,e[i][j-1]+1,e[i-1][j-1]+1)
    return e[-1][-1]
while True:
    try:
        a=input()
        b=input()
        print(compare(a,b))
            
    except:
        break


#####################
def compare(a,b):
    m,n=len(a),len(b)
    dp=list(range(n+1))
    for i in range(1,m+1):
        pre=dp[::]
        dp[0]=i
        for j in range(1,n+1):
            if a[i-1]==b[j-1]:
                dp[j]=pre[j-1]
            else:
                dp[j]=min(pre[j],pre[j-1],dp[j-1])+1
    return dp[-1]
while True:
    try:
        a=input()
        b=input()
        if a=='' or b=='':
            print(abs(len(a)-len(b)))
        else:
            print(compare(a,b))
    except:
        break
